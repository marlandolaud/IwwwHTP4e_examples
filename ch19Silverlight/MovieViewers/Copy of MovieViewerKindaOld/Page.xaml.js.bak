// Fig. 19.7: Page.xaml.js
// JavaScript code-behind for Movie Viewer

// create variables to more easily access the Silverlight elements
var host;
var Page;
var movieMediaElement;
var downloadProgressRectangle;
var timeText;
var timelineRectangle;
var playHead;
var timelineTimer;
var playButton;
var pauseButton;
var playOverlayCanvas;
var timelineTimer;
var volumeCanvas;
var volumeHead;
var crazyDogButton;
var gravityButton;
var apollo15Button;
var f35Button;
var controls;
var fullscreenButton;
var timeCanvas;
var titleText;
var playOverlayCanvasListener; // token for event listener

function canvasLoaded( sender, eventArgs )
{
   // set variables to more easily access the Silverlight elements
   host = sender.getHost(); // allow access to host plug-in
   Page = sender.findName( "Page" );
   movieMediaElement = sender.findName( "movieMediaElement" );
   downloadProgressRectangle = sender.findName(
      "downloadProgressRectangle" );
   timeText = sender.findName( "timeText" );
   timelineRectangle = sender.findName( "timelineRectangle" );
   playHead = sender.findName( "playHead" );
   timelineTimer = sender.findName( "timelineTimer" );
   playButton = sender.findName( "playButton" );
   pauseButton = sender.findName( "pauseButton" );
   playOverlayCanvas = sender.findName( "playOverlayCanvas" );
   volumeCanvas = sender.findName( "volumeCanvas" );
   volumeHead = sender.findName( "volumeHead" );
   crazyDogButton = sender.findName( "crazyDogButton" );
   gravityButton = sender.findName( "gravityButton" );
   apollo15Button = sender.findName( "apollo15Button" );
   f35Button = sender.findName( "f35Button" );
   controls = sender.findName( "controls" );
   fullscreenButton = sender.findName( "fullscreenButton" );
   timeCanvas = sender.findName( "timeCanvas" );
   titleText = sender.findName( "titleText" );

   // add an event handler for events onResize and OnFullScreenChange
   host.content.onFullScreenChange = onFullScreenChangeHandler;

   // update layout of application with current dimensions
   updateLayout( host.content.actualWidth, host.content.actualHeight,
      sender );

   // start the timer
   timelineTimer.begin();
} // end function canvasLoaded

// timelineTimer event handler
function updateTime()
{
   // get the hours, minutes and seconds of the video's current position
   var elapsedTime = movieMediaElement.position.Seconds;
   var hours = convertToHHMMSS( elapsedTime )[ 0 ]; // saves hours
   var minutes = convertToHHMMSS( elapsedTime )[ 1 ]; // saves minutes
   var seconds = convertToHHMMSS( elapsedTime )[ 2 ]; // saves seconds
    
   // set text of timeText to current time in hh:mm:ss format
   timeText.text = hours + ":" + minutes + ":" + seconds;

   // set width of downloadProgressRectangle
   downloadProgressRectangle.width = movieMediaElement.downloadProgress *
      timelineRectangle.width;
   
   // if the movie has started playing, place the seek head at a
   // position representing the playback progress
   if ( movieMediaElement.position.Seconds &&
      movieMediaElement.naturalDuration )
   {
      playHead[ "Canvas.Left" ] = ( ( movieMediaElement.position.Seconds /
         movieMediaElement.naturalDuration.Seconds ) *
         timelineRectangle.Width ) + timelineRectangle[ "Canvas.Left" ];
   } // end if
  
   else  // if not, place the seek head at the beginning
   {
      playHead[ "Canvas.Left" ] = timelineRectangle[ "Canvas.Left" ];
   } // end else
      
   // if download is incomplete or movie is playing
   if ( movieMediaElement.downloadProgress != 1 ||  
      movieMediaElement.CurrentState == "Playing" )
   {
      timelineTimer.begin(); // run timelineTimer again
   } // end if
} // end function updateTime

// handle play and pause buttons
function playAndPauseButtonEventHandler( sender, eventArgs )
{
   // Check the CurrentState of the movie
   // pause if playing, play if paused or stopped
   if ( movieMediaElement.CurrentState == "Playing" )
   {
      movieMediaElement.pause();

      playButton.Visibility = "Visible"; // show play button
      pauseButton.Visibility = "Collapsed"; // hide pause button
   } // end if
   else 
   {
      movieMediaElement.play();

      timelineTimer.begin(); // start timelineTimer again

      pauseButton.Visibility = "Visible"; // show pause button
      playButton.Visibility = "Collapsed"; // hide play button

      playOverlayCanvas.Visibility = "Collapsed"; // hide "Play" button

      // remove the click handler from "Play" button
      if ( playOverlayCanvasListener )
      {
         playOverlayCanvas.removeEventListener( "MouseLeftButtonDown",
            playOverlayCanvasListener );
      } // end if
   } // end if
} // end function playAndPauseButtonEventHandler

// handle stop button
function stopButtonEventHandler( sender, eventArgs )
{
   movieMediaElement.stop(); // stop the movie
   playButton.Visibility = "Visible"; // show play button
   pauseButton.Visibility = "Collapsed"; // hide pause button

   // show "Play" button
   playOverlayCanvas.Visibility = "Visible";
   playOverlayCanvasListener = playOverlayCanvas.addEventListener(
      "MouseLeftButtonDown", playAndPauseButtonEventHandler );
   updateTime();
} // end function stopButtonEventHandler

// handle MediaOpened event 
function movieOpenedHandler( sender, eventArgs )
{
   timelineTimer.begin();

   // show "Play" button
   playOverlayCanvas.Visibility = "Visible";
   playOverlayCanvasListener = playOverlayCanvas.addEventListener(
      "MouseLeftButtonDown", playAndPauseButtonEventHandler );
} // end function movieOpenedHandler

// handle when movie has reached end
function movieEndedHandler( sender, eventArgs )
{
   movieMediaElement.stop(); // stop the movie
   playButton.Visibility = "Visible"; // show play button
   pauseButton.Visibility = "Collapsed"; // hide pause button

   // show "Play" button
   playOverlayCanvas.Visibility = "Visible";
   playOverlayCanvasListener = playOverlayCanvas.addEventListener(
      "MouseLeftButtonDown", playAndPauseButtonEventHandler );
   updateTime();
} // end function movieEndedHandler

function movieThumbHandler ( sender, eventArgs )
{
   movieMediaElement.stop(); // stop movie
   playButton.Visibility = "Visible"; // show play button
   pauseButton.Visibility = "Collapsed"; // hide pause button

   switch (sender.name)
   {
      case "crazyDogButton":
         // open Crazy Dog video
         movieMediaElement.source = "bailey.wmv"; 
         break;
      case "gravityButton":
         // open Gravity video   
         movieMediaElement.source = "featherAndHammer.wmv";
         break;
      case "apollo15Button":
         // open Apollo 15 video 
         movieMediaElement.source = "apollo15Launch.wmv";
         break;
      case "f35Button":
         // open F35 Landing video 
         movieMediaElement.source = "F35.wmv";
         break;
   }
} // end function movieThumbHandler

// handle toggle full-screen button by toggling fullScreen state
function toggleFullScreen( sender, eventArgs )
{
   host.content.fullScreen = !host.content.fullScreen;
} // end function toggleFullScreen

// handle onFullScreenChange and onResize events
function onFullScreenChangeHandler( sender, eventArgs )
{
   // update layout based on current dimensions
   updateLayout( host.content.actualWidth,
      host.content.actualHeight, sender );

   // update time and timeline
   updateTime();
} // end function onFullScreenChangeHandler

// reposition and resize elements based on new dimensions
function updateLayout( width, height, sender )
{
   // resize and reposition the elements based on the screen dimensions
   Page.Width = width;
   Page.Height = height;
   movieMediaElement.Width = width;
   movieMediaElement.Height = height - 220;
   movieMediaElement[ "Canvas.Left" ] = 
      ( width / 2 ) - ( ( movieMediaElement.width ) / 2 );
   movieMediaElement[ "Canvas.Top" ] = 
      ( ( height - 220 ) / 2 ) - ( movieMediaElement.height / 2 );
   controls.width = width - 8;
   movieMediaElement.Width = width;
   movieMediaElement.Height = height - 210;
   playOverlayCanvas[ "Canvas.Left" ] = 
      ( width / 2 ) - ( ( playOverlayCanvas.width ) / 2 );
   playOverlayCanvas[ "Canvas.Top" ] = 
      ( ( height - 220 ) / 2 ) - ( playOverlayCanvas.height / 2 );
   controls.width = width; 
   controls[ "Canvas.Left" ] = ( width / 2 ) - ( ( controls.width ) / 2 );
   controls[ "Canvas.Top" ] = height - controls.Height;
   timelineRectangle.width = controls.width - 235;
   fullscreenButton[ "Canvas.Left" ] = controls.width - 55;
   timeCanvas[ "Canvas.Left" ] = controls.width - 140;
   volumeCanvas[ "Canvas.Left" ] = controls.width - 22;
   titleText[ "Canvas.Left" ] = 
      ( width / 2 ) - ( ( titleText.width ) / 2 );
} // end function updateLayout

// handle timelineCanvas's MouseLeftButtonDown event
function timelineHandler( sender, eventArgs )
{
   // determine new time from mouse position
   var elapsedTime = ( ( eventArgs.getPosition( timelineRectangle ).x ) / 
      timelineRectangle.Width ) * 
      movieMediaElement.NaturalDuration.seconds;
   var hours = convertToHHMMSS( elapsedTime )[ 0 ]; // Saves hours
   var minutes = convertToHHMMSS( elapsedTime )[ 1 ]; // Saves minutes
   var seconds = convertToHHMMSS( elapsedTime )[ 2 ]; // Saves seconds
   movieMediaElement.Position = hours + ":" + minutes + ":" + seconds;
   updateTime();
} // end function timelineHandler

// handle volume's MouseLeftButtonDown event
function volumeHandler( sender, eventArgs )
{
   movieMediaElement.volume = 1 - ( ( eventArgs.getPosition( 
      volumeCanvas ).y ) / 30 );
   volumeHead[ "Canvas.Top" ] = eventArgs.getPosition( volumeCanvas ).
      y;
} // end function volumeHandler

// get the hours, minutes and seconds of the video's current position
// Date element converts seconds to hh:mm:ss format
function convertToHHMMSS( seconds )
{
   var datetime = new Date( 0, 0, 0, 0, 0, seconds );
   var hours = datetime.getHours(); // Saves hours to var
   var minutes = datetime.getMinutes(); // Saves minutes to var
   var seconds = datetime.getSeconds(); // Saves seconds to var

   // ensure hh:mm:ss format
   if ( seconds < 10 )
   {
       seconds = "0" + seconds;
   } // end if

   if ( minutes < 10 ) 
   {
       minutes = "0" + minutes;
   } // end if

   if ( hours < 10 )
   {
      hours = "0" + hours;
   } // end if

   return [ hours, minutes, seconds ]
} // end function convertToHHMMSS