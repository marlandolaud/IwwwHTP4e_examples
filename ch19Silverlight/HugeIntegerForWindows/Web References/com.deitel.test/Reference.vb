'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1378
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1378.
'
Namespace com.deitel.test
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1378"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="HugeIntegerSoap", [Namespace]:="http://www.deitel.com/")>  _
    Partial Public Class HugeInteger
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private AddOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SubtractOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BiggerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SmallerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EqualToOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.HugeIntegerForWindows.My.MySettings.Default.HugeIntegerForWindows_com_deitel_test_HugeInteger
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event AddCompleted As AddCompletedEventHandler
        
        '''<remarks/>
        Public Event SubtractCompleted As SubtractCompletedEventHandler
        
        '''<remarks/>
        Public Event BiggerCompleted As BiggerCompletedEventHandler
        
        '''<remarks/>
        Public Event SmallerCompleted As SmallerCompletedEventHandler
        
        '''<remarks/>
        Public Event EqualToCompleted As EqualToCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.deitel.com/Add", RequestNamespace:="http://www.deitel.com/", ResponseNamespace:="http://www.deitel.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Add(ByVal first As String, ByVal second As String) As String
            Dim results() As Object = Me.Invoke("Add", New Object() {first, second})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddAsync(ByVal first As String, ByVal second As String)
            Me.AddAsync(first, second, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddAsync(ByVal first As String, ByVal second As String, ByVal userState As Object)
            If (Me.AddOperationCompleted Is Nothing) Then
                Me.AddOperationCompleted = AddressOf Me.OnAddOperationCompleted
            End If
            Me.InvokeAsync("Add", New Object() {first, second}, Me.AddOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCompleted(Me, New AddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.deitel.com/Subtract", RequestNamespace:="http://www.deitel.com/", ResponseNamespace:="http://www.deitel.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Subtract(ByVal first As String, ByVal second As String) As String
            Dim results() As Object = Me.Invoke("Subtract", New Object() {first, second})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SubtractAsync(ByVal first As String, ByVal second As String)
            Me.SubtractAsync(first, second, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SubtractAsync(ByVal first As String, ByVal second As String, ByVal userState As Object)
            If (Me.SubtractOperationCompleted Is Nothing) Then
                Me.SubtractOperationCompleted = AddressOf Me.OnSubtractOperationCompleted
            End If
            Me.InvokeAsync("Subtract", New Object() {first, second}, Me.SubtractOperationCompleted, userState)
        End Sub
        
        Private Sub OnSubtractOperationCompleted(ByVal arg As Object)
            If (Not (Me.SubtractCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SubtractCompleted(Me, New SubtractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.deitel.com/Bigger", RequestNamespace:="http://www.deitel.com/", ResponseNamespace:="http://www.deitel.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Bigger(ByVal first As String, ByVal second As String) As Boolean
            Dim results() As Object = Me.Invoke("Bigger", New Object() {first, second})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BiggerAsync(ByVal first As String, ByVal second As String)
            Me.BiggerAsync(first, second, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BiggerAsync(ByVal first As String, ByVal second As String, ByVal userState As Object)
            If (Me.BiggerOperationCompleted Is Nothing) Then
                Me.BiggerOperationCompleted = AddressOf Me.OnBiggerOperationCompleted
            End If
            Me.InvokeAsync("Bigger", New Object() {first, second}, Me.BiggerOperationCompleted, userState)
        End Sub
        
        Private Sub OnBiggerOperationCompleted(ByVal arg As Object)
            If (Not (Me.BiggerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BiggerCompleted(Me, New BiggerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.deitel.com/Smaller", RequestNamespace:="http://www.deitel.com/", ResponseNamespace:="http://www.deitel.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Smaller(ByVal first As String, ByVal second As String) As Boolean
            Dim results() As Object = Me.Invoke("Smaller", New Object() {first, second})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SmallerAsync(ByVal first As String, ByVal second As String)
            Me.SmallerAsync(first, second, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SmallerAsync(ByVal first As String, ByVal second As String, ByVal userState As Object)
            If (Me.SmallerOperationCompleted Is Nothing) Then
                Me.SmallerOperationCompleted = AddressOf Me.OnSmallerOperationCompleted
            End If
            Me.InvokeAsync("Smaller", New Object() {first, second}, Me.SmallerOperationCompleted, userState)
        End Sub
        
        Private Sub OnSmallerOperationCompleted(ByVal arg As Object)
            If (Not (Me.SmallerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SmallerCompleted(Me, New SmallerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.deitel.com/EqualTo", RequestNamespace:="http://www.deitel.com/", ResponseNamespace:="http://www.deitel.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EqualTo(ByVal first As String, ByVal second As String) As Boolean
            Dim results() As Object = Me.Invoke("EqualTo", New Object() {first, second})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EqualToAsync(ByVal first As String, ByVal second As String)
            Me.EqualToAsync(first, second, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EqualToAsync(ByVal first As String, ByVal second As String, ByVal userState As Object)
            If (Me.EqualToOperationCompleted Is Nothing) Then
                Me.EqualToOperationCompleted = AddressOf Me.OnEqualToOperationCompleted
            End If
            Me.InvokeAsync("EqualTo", New Object() {first, second}, Me.EqualToOperationCompleted, userState)
        End Sub
        
        Private Sub OnEqualToOperationCompleted(ByVal arg As Object)
            If (Not (Me.EqualToCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EqualToCompleted(Me, New EqualToCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1378")>  _
    Public Delegate Sub AddCompletedEventHandler(ByVal sender As Object, ByVal e As AddCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1378"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1378")>  _
    Public Delegate Sub SubtractCompletedEventHandler(ByVal sender As Object, ByVal e As SubtractCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1378"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubtractCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1378")>  _
    Public Delegate Sub BiggerCompletedEventHandler(ByVal sender As Object, ByVal e As BiggerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1378"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BiggerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1378")>  _
    Public Delegate Sub SmallerCompletedEventHandler(ByVal sender As Object, ByVal e As SmallerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1378"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SmallerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1378")>  _
    Public Delegate Sub EqualToCompletedEventHandler(ByVal sender As Object, ByVal e As EqualToCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1378"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EqualToCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
End Namespace
